package main

import (
	"bytes" // "bytes" パッケージをインポート
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	// MinIOの内部パッケージ (Go Modulesで解決される想定)
	"github.com/minio/minio/pkg/auth"   // auth.Credentials 構造体のため
	"github.com/minio/minio/pkg/madmin" // madmin.DecryptData のため
)

// UserIdentity 構造体 (cmd/iam.go からのコピー)
// MinIOの `UserIdentity` の定義に合わせてください。
// 通常、この構造体は `auth.Credentials` を含みます。
type UserIdentity struct {
	Version     int              `json:"version"`
	Credentials auth.Credentials `json:"credentials"`
	// 他にもフィールドがあれば、MinIOの `cmd/iam.go` の UserIdentity の定義に合わせて追加してください。
}

func main() {
	rootUser := flag.String("root-user", "", "MinIO Root User (Access Key ID)")
	rootPassword := flag.String("root-password", "", "MinIO Root Password (Secret Access Key)")
	identityFilePath := flag.String("identity-file", "", "Path to the encrypted identity.json file")

	flag.Parse()

	if *rootUser == "" || *rootPassword == "" || *identityFilePath == "" {
		fmt.Println("Usage: go run decrypt_identity.go -root-user <user> -root-password <password> -identity-file <path>")
		flag.PrintDefaults()
		os.Exit(1)
	}

	// ルートクレデンシャルを結合してパスワードとして使用
	// madmin.DecryptData は string のパスワードを期待します
	password := *rootUser + *rootPassword

	// identity.json ファイルを読み込む
	encryptedData, err := ioutil.ReadFile(*identityFilePath)
	if err != nil {
		log.Fatalf("Failed to read identity file %s: %v", *identityFilePath, err)
	}

	// データを復号
	// madmin.DecryptData は io.Reader を期待するので、bytes.NewReader を使用
	decryptedData, err := madmin.DecryptData(password, bytes.NewReader(encryptedData))
	if err != nil {
		// madmin.ErrMaliciousData はパスワードが違うかデータ破損の場合に返ります
		if err == madmin.ErrMaliciousData {
			log.Fatalf("Failed to decrypt data: Incorrect root credentials or corrupted data. (%v)", err)
		}
		log.Fatalf("Failed to decrypt data: %v", err)
	}

	// 復号されたJSONをパース
	var userIdentity UserIdentity
	if err := json.Unmarshal(decryptedData, &userIdentity); err != nil {
		// パース失敗時に、復号されたデータの先頭部分を表示してデバッグしやすくする
		dataSnippet := string(decryptedData)
		if len(dataSnippet) > 200 {
			dataSnippet = dataSnippet[:200] + "..."
		}
		log.Fatalf("Failed to unmarshal decrypted JSON: %v\nDecrypted data (first 200 bytes or less): %s", err, dataSnippet)
	}

	// 結果の表示
	fmt.Println("Successfully decrypted identity.json!")
	fmt.Println("--------------------------------------------------")
	fmt.Printf("  Target User Access Key:  %s\n", userIdentity.Credentials.AccessKey)
	fmt.Printf("  Target User Secret Key:  %s\n", userIdentity.Credentials.SecretKey) // ✨これが求めるシークレットキー！
	fmt.Printf("  Target User Status:      %s\n", userIdentity.Credentials.Status)
	if !userIdentity.Credentials.Expiration.IsZero() {
		fmt.Printf("  Target User Expiration:  %s\n", userIdentity.Credentials.Expiration)
	}
	// UserIdentity 構造体に他のフィールド (例: PolicyName, MemberOf など) があれば、それらも表示できます
	// fmt.Printf("  Target User Policy Name: %s\n", userIdentity.PolicyName) // 例
	fmt.Println("--------------------------------------------------")
}

// min関数は、json.Unmarshal失敗時のデバッグ表示で使っていましたが、
// 可読性のため上記のように直接スライス操作に置き換えました。
// もし必要であれば残しても良いですが、必須ではありません。
/*
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
*/
